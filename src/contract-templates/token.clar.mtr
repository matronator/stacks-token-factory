;; Implement the `ft-trait` trait defined in the `ft-trait` contract
;; (impl-trait .ft-trait.sip-010-trait)
(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)

(define-fungible-token <% name|kebabCase %>)

(define-constant ERR_OWNER_ONLY (err u100))
(define-constant ERR_NOT_TOKEN_OWNER (err u101))

(define-constant CONTRACT_OWNER tx-sender)
(define-constant TOKEN_URI u"<% tokenUri %>>") ;; utf-8 string with token metadata host
(define-constant TOKEN_NAME "<% name %>")
(define-constant TOKEN_SYMBOL "<% symbol %>")
(define-constant TOKEN_DECIMALS u<% decimals %>) ;; 6 units displayed past decimal, e.g. 1.000_000 = 1 token

;; get the token balance of owner
(define-read-only (get-balance (owner principal))
  (begin
    (ok (ft-get-balance <% name|kebabCase %> owner))))

;; returns the total number of tokens
(define-read-only (get-total-supply)
  (ok (ft-get-supply <% name|kebabCase %>)))

;; returns the token name
(define-read-only (get-name)
  (ok TOKEN_NAME))

;; the symbol or "ticker" for this token
(define-read-only (get-symbol)
  (ok TOKEN_SYMBOL))

;; the number of decimals used
(define-read-only (get-decimals)
  (ok TOKEN_DECIMALS))

;; Transfers tokens to a recipient
(define-public (transfer
  (amount uint)
  (sender principal)
  (recipient principal)
  (memo (optional (buff 34)))
)
  (begin
    ;; #[filter(amount, recipient)]
    (asserts! (is-eq tx-sender sender) ERR_NOT_TOKEN_OWNER)
    (try! (ft-transfer? clarity-coin amount sender recipient))
    (match memo to-print (print to-print) 0x)
    (ok true)
  )
)

(define-public (get-token-uri)
  (ok TOKEN_URI))

(define-public (set-token-uri (token_uri (option buff 34)))
  (if (is-eq tx-sender (ft-get-owner <% name|kebabCase %>))
    (begin
      (ft-set-token-uri <% name|kebabCase %> token_uri)
      (ok true))
    (err u4)))

<% if $mintable === true %>

(define-public (mint (amount uint) (recipient principal))
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) ERR_OWNER_ONLY)
    (ft-mint? clarity-coin amount recipient)
  )
)

<% endif %>

;; Mint this token to a few people when deployed
(ft-mint? <% name|kebabCase %> u<% supply %> '<% userWallet %>)
